#!/bin/bash
# kscale - Scale or get replica count of Kubernetes Deployments or StatefulSets
#
# Usage:
#   kscale [search-string] [replica-count] [-n namespace]
#   kscale get [search-string] [-n namespace]
#
# Arguments:
#   search-string   Partial name of deployment/statefulset
#   replica-count   (Optional) Desired replica count (e.g., 0, 1, 3)
#
# Options:
#   -n, --namespace NAMESPACE   Namespace (default: "default")

# === DEFAULTS ===
NAMESPACE="default"
SEARCH=""
REPLICAS=""
SUBCOMMAND=""

# === COLORS ===
BOLD='\033[1m'
RESET='\033[0m'
GREEN='\033[0;32m'
RED='\033[0;31m'

# === PARSE ARGS ===
while [[ $# -gt 0 ]]; do
    case "$1" in
        get)
            SUBCOMMAND="get"
            ;;
        -n|--namespace)
            shift
            NAMESPACE="$1"
            ;;
        *)
            if [[ -z "$SEARCH" ]]; then
                SEARCH="$1"
            elif [[ -z "$REPLICAS" && "$SUBCOMMAND" != "get" ]]; then
                REPLICAS="$1"
            fi
            ;;
    esac
    shift
done

if [ -z "$SEARCH" ]; then
    read -p "Enter search string: " SEARCH
fi

# === GET MATCHES FROM DEPLOYMENTS AND STATEFULSETS ===
DEPLOYMENTS=()
while IFS= read -r line; do
    DEPLOYMENTS+=("$line")
done < <(kubectl get deployments -n "$NAMESPACE" --no-headers | grep "$SEARCH")

STATEFULSETS=()
while IFS= read -r line; do
    STATEFULSETS+=("$line")
done < <(kubectl get statefulsets -n "$NAMESPACE" --no-headers | grep "$SEARCH")

ALL_MATCHES=()

# Separate resource name (first column) from the full line, and store both
for d in "${DEPLOYMENTS[@]}"; do
    NAME=$(awk '{print $1}' <<< "$d")
    ALL_MATCHES+=("Deployment:$NAME:$d")
done
for s in "${STATEFULSETS[@]}"; do
    NAME=$(awk '{print $1}' <<< "$s")
    ALL_MATCHES+=("StatefulSet:$NAME:$s")
done

COUNT=${#ALL_MATCHES[@]}

if [ "$COUNT" -eq 0 ]; then
    echo -e "${RED}No deployments or statefulsets found matching '${SEARCH}' in namespace '${NAMESPACE}'${RESET}"
    exit 1
elif [ "$COUNT" -eq 1 ]; then
    IFS=":" read -r RESOURCE_TYPE RESOURCE_NAME RESOURCE_LINE <<< "${ALL_MATCHES[0]}"
else
    echo -e "${BOLD}Multiple matches found:${RESET}"
    for i in "${!ALL_MATCHES[@]}"; do
        IFS=":" read -r TYPE NAME LINE <<< "${ALL_MATCHES[$i]}"
        printf " %2d) [%s] %s\n" $((i+1)) "$TYPE" "$LINE"
    done
    read -p "Select a number: " SEL
    SEL_INDEX=$((SEL-1))
    if [[ $SEL_INDEX -ge 0 && $SEL_INDEX -lt $COUNT ]]; then
        IFS=":" read -r RESOURCE_TYPE RESOURCE_NAME RESOURCE_LINE <<< "${ALL_MATCHES[$SEL_INDEX]}"
    else
        echo "Invalid selection."
        exit 1
    fi
fi

# === SHOW TARGET INFO IMMEDIATELY AFTER MATCHING ===
echo -e "\n${BOLD}Namespace:${RESET} $NAMESPACE"
echo -e "${BOLD}Target:${RESET} $RESOURCE_NAME [$RESOURCE_TYPE]"
echo -e "${BOLD}Details:${RESET}"
if [[ "$RESOURCE_TYPE" == "Deployment" ]]; then
    echo "NAME                     READY   UP-TO-DATE   AVAILABLE   AGE"
else
    echo "NAME                     READY   AGE"
fi
echo "$RESOURCE_LINE"

# === GET CURRENT REPLICA COUNT ===
CURRENT_REPLICAS=$(kubectl get "$RESOURCE_TYPE" "$RESOURCE_NAME" -n "$NAMESPACE" -o jsonpath='{.spec.replicas}' 2>/dev/null)

# === GET MODE ===
if [[ "$SUBCOMMAND" == "get" ]]; then
    echo -e "\n${BOLD}$RESOURCE_TYPE $RESOURCE_NAME${RESET} in namespace '${NAMESPACE}' has ${GREEN}$CURRENT_REPLICAS${RESET} replicas configured."
    exit 0
fi

# === VALIDATE REPLICAS ===
if [ -z "$REPLICAS" ]; then
    read -p "Enter desired replica count: " REPLICAS
fi

if ! [[ "$REPLICAS" =~ ^[0-9]+$ ]]; then
    echo -e "${RED}Error:${RESET} Replica count must be a non-negative integer."
    exit 1
fi

# === CONFIRMATION ===
echo -e "\n${BOLD}Namespace:${RESET} $NAMESPACE"
echo -e "${BOLD}Target:${RESET} $RESOURCE_NAME [$RESOURCE_TYPE]"
echo -e "${BOLD}Scale to:${RESET} $REPLICAS replica(s)"
read -p "Are you sure? [y/N]: " CONFIRM
if [[ "$CONFIRM" =~ ^[Yy]$ ]]; then
    echo -e "Scaling ${BOLD}$RESOURCE_NAME${RESET} to ${BOLD}$REPLICAS${RESET} replicas..."
    kubectl scale "$RESOURCE_TYPE" "$RESOURCE_NAME" -n "$NAMESPACE" --replicas="$REPLICAS"
else
    echo "Aborted."
    exit 0
fi